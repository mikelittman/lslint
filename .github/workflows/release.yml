name: Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, x86]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install flex bison
          if [ "${{ matrix.arch }}" = "x86" ]; then
            sudo apt-get install gcc-multilib g++-multilib
          fi

      - name: Get LSL definitions commit hash
        id: lsl_hash
        run: |
          LSL_HASH=$(cd lsl-definitions && git rev-parse --short=7 HEAD)
          echo "lsl_hash=$LSL_HASH" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          export BUILD_VERSION_NUMBER="lsl-${{ steps.lsl_hash.outputs.lsl_hash }}-src-${{ github.sha }}"
          export DEBUG=""
          if [ "${{ matrix.arch }}" = "x86" ]; then
            export BUILD_ADDITIONAL_ARG="-m32"
          fi
          make
          file -L lslint

      - name: Rename binary
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            mv lslint lslint-linux-x64
          else
            mv lslint lslint-linux-x86
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lslint-linux-${{ matrix.arch }}
          path: lslint-linux-${{ matrix.arch }}

      - name: Upload version info (x64 only)
        if: matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: kwdb_version.txt

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install flex bison
          export PATH="/usr/local/opt/bison/bin:/opt/homebrew/opt/bison/bin:$PATH"

      - name: Get LSL definitions commit hash
        id: lsl_hash
        run: |
          LSL_HASH=$(cd lsl-definitions && git rev-parse --short=7 HEAD)
          echo "lsl_hash=$LSL_HASH" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          export BUILD_VERSION_NUMBER="lsl-${{ steps.lsl_hash.outputs.lsl_hash }}-src-${{ github.sha }}"
          export DEBUG=""
          export PATH="/usr/local/opt/bison/bin:/opt/homebrew/opt/bison/bin:$PATH"
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            export BUILD_ADDITIONAL_ARG="-arch arm64"
          else
            export BUILD_ADDITIONAL_ARG="-arch x86_64"
          fi
          make
          file -L lslint

      - name: Rename binary
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            mv lslint lslint-macos-arm64
          else
            mv lslint lslint-macos-x64
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lslint-macos-${{ matrix.arch }}
          path: lslint-macos-${{ matrix.arch }}

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
    steps:
      - uses: actions/checkout@v4

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Install flex and bison
        run: |
          curl.exe -L -O https://github.com/lexxmark/winflexbison/releases/download/v2.5.25/win_flex_bison-2.5.25.zip
          mkdir C:\win_flex_bison
          tar -xf win_flex_bison-2.5.25.zip -C C:\win_flex_bison
          echo "C:\win_flex_bison" >> $env:GITHUB_PATH

      - name: Get LSL definitions commit hash
        id: lsl_hash
        run: |
          $LSL_HASH = (cd lsl-definitions && git rev-parse --short=7 HEAD)
          echo "lsl_hash=$LSL_HASH" >> $env:GITHUB_OUTPUT

      - name: Build
        run: |
          $env:BUILD_VERSION_NUMBER = "lsl-${{ steps.lsl_hash.outputs.lsl_hash }}-src-${{ github.sha }}"
          $env:BUILD_DATE = "$(Get-Date -Format 'yyyy-MM-dd')"
          nmake /F NMakefile
          dumpbin /headers lslint.exe

      - name: Rename binary
        run: |
          if ("${{ matrix.arch }}" -eq "x64") {
            mv lslint.exe lslint-windows-x64.exe
          } else {
            mv lslint.exe lslint-windows-x86.exe
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lslint-windows-${{ matrix.arch }}
          path: lslint-windows-${{ matrix.arch }}.exe

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version info
        id: version
        run: |
          LSL_HASH=$(cd lsl-definitions && git rev-parse --short=7 HEAD)
          SRC_HASH=$(echo "${{ github.sha }}" | cut -c1-7)
          VERSION="lsl-${LSL_HASH}-src-${SRC_HASH}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release archives
        run: |
          mkdir -p releases
          cd artifacts

          # Linux x64
          cd lslint-linux-x64
          zip ../../releases/lslint-${{ steps.version.outputs.version }}-linux-x64.zip lslint-linux-x64
          cd ..

          # Linux x86
          cd lslint-linux-x86
          zip ../../releases/lslint-${{ steps.version.outputs.version }}-linux-x86.zip lslint-linux-x86
          cd ..

          # macOS x64
          cd lslint-macos-x64
          zip ../../releases/lslint-${{ steps.version.outputs.version }}-macos-x64.zip lslint-macos-x64
          cd ..

          # macOS ARM64
          cd lslint-macos-arm64
          zip ../../releases/lslint-${{ steps.version.outputs.version }}-macos-arm64.zip lslint-macos-arm64
          cd ..

          # Windows x64
          cd lslint-windows-x64
          zip ../../releases/lslint-${{ steps.version.outputs.version }}-windows-x64.zip lslint-windows-x64.exe
          cd ..

          # Windows x86
          cd lslint-windows-x86
          zip ../../releases/lslint-${{ steps.version.outputs.version }}-windows-x86.zip lslint-windows-x86.exe
          cd ..

      - name: Get release notes
        id: release_notes
        run: |
          if [ -f "artifacts/version-info/kwdb_version.txt" ]; then
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
            echo "Auto-generated release ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            tail -n +2 "artifacts/version-info/kwdb_version.txt" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NOTES=Auto-generated release ${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          files: releases/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
